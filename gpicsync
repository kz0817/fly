#!/usr/bin/env python

import argparse
import sys
import os.path
import time
import gdata.photos.service
import Image

EXIF_TAG_DATE_TIME_ORIGINAL = 36867
EXIF_TAG_DATE_TIME_DIGITIZED = 36868

EXIF_TAG_NAME = {
  EXIF_TAG_DATE_TIME_ORIGINAL:'DateTimeOriginal'
}

def extract_base_name(path):
  base_name = os.path.basename(path)
  ext_pos = base_name.rindex('.')
  serial_pos = base_name.rfind('-')
  if serial_pos == -1:
    name_body = base_name[:ext_pos]
    serial = 0
  else:
    name_body = base_name[:serial_pos]
    serial = base_name[serial_pos+1:ext_pos]
  return (name_body, serial)

def parse_exif(path):
  info = {'path':path}
  (info['name_body'], info['serial']) = extract_base_name(path)

  im = Image.open(path)
  exif = im._getexif()
  for key,val in exif.items():
    if key == EXIF_TAG_DATE_TIME_ORIGINAL:
      info[EXIF_TAG_NAME[key]] = val
      break
  else:
    raise 'Not found %s in EXIF: %s' % \
          (EXIF_TAG_NAME[EXIF_TAG_DATE_TIME_ORIGINAL], info['base_name'])

  # unix time
  struct_time = time.strptime(info[EXIF_TAG_NAME[EXIF_TAG_DATE_TIME_ORIGINAL]],
                              '%Y:%m:%d %H:%M:%S')
  info['time'] = int(time.mktime(struct_time))

  return info

def make_file_info_key(name_body, time):
  return "%s-%d" % (name_body, time)

def start():
  global time
  tz_offset = -time.timezone

  parser = argparse.ArgumentParser(description='Synchronize pictures with Picsa.')
  parser.add_argument('userid', type=str)
  parser.add_argument('password', type=str)
  parser.add_argument('file', nargs='+', type=str)
  args = parser.parse_args()
  print "User: %s, Password: %s" % (args.userid, args.password)

  file_info = {}
  for path in args.file:
    info = parse_exif(path)
    key = make_file_info_key(info['name_body'], info['time'])
    print key,info
    if key in file_info:
      print "WARN: Duplicated key: '%s'. Ignored" % key
      continue
    file_info[key] = info

  client = gdata.photos.service.PhotosService()
  client.ClientLogin(args.userid, args.password)

  albums = client.GetUserFeed()
  for album in albums.entry:
    photos = client.GetFeed('/data/feed/api/user/%s/albumid/%s?kind=photo' % \
                            (args.userid, album.gphoto_id.text))
    for photo in photos.entry:
      title = photo.title.text
      time = photo.exif.time
      if not time:
        continue;
      time = int(time.text)/1000 # ms -> sec
      time -= tz_offset
      gphoto_id = photo.gphoto_id.text
      (name_body, serial) = extract_base_name(title)
      key = make_file_info_key(name_body, time)
      print key, gphoto_id, title, name_body, time
      if key not in file_info:
        continue
      print "=> matched"
      finfo = file_info[key]
      client.UpdatePhotoBlob(photo, finfo['path'], 'image/jpeg')
      print "=> updated"
      del file_info[key]
      if len(file_info) == 0:
        sys.exit(0)

if __name__ == '__main__':
  start()
